[{"path":"https://docs.ropensci.org/baRcodeR/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/baRcodeR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Yihan Wu;Robert I Colautti  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. baRcodeR Copyright (C) 2019 Yihan Wu;Robert I Colautti This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"cheat-sheet","dir":"Articles","previous_headings":"","what":"Cheat Sheet","title":"Using baRcodeR with command line prompts","text":"2-page, quick-reference guide available via Figshare","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using baRcodeR with command line prompts","text":"Creating unique, scannable 2-D barcodes involves two steps: Generate unique ID codes uniqID_maker() uniqID_hier_maker() Create PDF file containing unique ID codes coupled 2D barcode using create_PDF() already ID codes saved CSV file, skip step #1 import directly data.frame() object step #2: see Create barcodes. using baRcodeR RStudio addin, refer package vignette Use baRcodeR addin vignette(\"use-addin\", package=\"baRcodeR\"). functions baRcodeR accept parameters two ways: 1) command line part function, 2) interactively user input user=TRUE specified part function. vignette cover two different ways obtain text identifiers PDF sheets needed printing.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"uniqID-maker","dir":"Articles","previous_headings":"","what":"Create simple ID codes","title":"Using baRcodeR with command line prompts","text":"Simple ID codes can generated using uniqID_maker() function. One-level ID codes consist two parts, leading string shared samples number unique sample. example, want generate basic ID codes 5 individuals: First, load baRcodeR library.","code":"example005 example006 example007 example008 example009 example010 library(baRcodeR) ## Loading required package: qrcode"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"uniqID-maker-user-prompt","dir":"Articles","previous_headings":"Create simple ID codes","what":"By user prompt","title":"Using baRcodeR with command line prompts","text":"Run uniqID_make(r)) function interactive mode. NOTE: typing console user prompts, strings quoted. User prompts appear console. Inputs received user passed parameters uniqID_maker() create object IDcodes, data.frame() object containing vector unique IDs first column, additional columns strings individual numbers provided user. Please enter string level: string entered defines leading part ID code individual code. can name population, species location. example, string entered user console denoted > symbol “example”. Please enter string level: example second user prompt : Please enter starting number level (integer): prompt asks starting number generate unique IDs. codes start 1. Please enter starting number level (integer): 5 third user prompt : Enter ending number level: prompt asks ending number. Unique IDs generated sequentially starting number ending number. Note higher number can used starting number generate reverse order. possible generate IDs sequentially numbered passing vector uniqID_maker() (e.g. seq()) (see arguments) Enter ending number level: 10 starting ending numbers set, function generates series numbers. user asked number digits unique ID. Number digits print level: number must >= maximum number digits unique ID code add leading zeros needed. particularly useful generating smaller number ID codes expected part much larger sample set. Number digits print level: 3","code":"IDcodes <- uniqID_maker(user = TRUE)"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"IDcode-maker-arguments","dir":"Articles","previous_headings":"Create simple ID codes","what":"By arguments","title":"Using baRcodeR with command line prompts","text":"also possible create unique ID codes directly, without user prompts, defining parameters uniqID_maker. interactive example can reproduced single line code: complicated, non-sequential ID codes can generated via levels parameter: output : ID codes can saved text file use programs (e.g. spreadsheet):","code":"IDcodes <- uniqID_maker(string = \"example\", level = 5:10, digits = 3) IDcodes ##        label ind_string ind_number ## 1 example005    example        005 ## 2 example006    example        006 ## 3 example007    example        007 ## 4 example008    example        008 ## 5 example009    example        009 ## 6 example010    example        010 number_sequence <- seq(1, 10, 2) IDcodes <- uniqID_maker(string = \"example\", level = number_sequence, digits = 3) write.csv(IDcodes, \"IDcodes.csv\")"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"uniqID_hier_maker","dir":"Articles","previous_headings":"","what":"Create hierarchical ID codes","title":"Using baRcodeR with command line prompts","text":"uniqID_hier_maker used make unique ID codes follow hierarchical (.e. nested) structure, example might sample B individuals populations C time points. Similar uniqID_maker, function can run interactively directly defining parameters. contrast uniqID_maker, uniqID_hier_maker used generate nested pairs strings unique ID codes. example list hierarchical identifier codes three levels (, b, c) varying numbers individuals level (=3, b=2, c=2).","code":"a1-b1-c1 a1-b1-c2 a1-b2-c1 a1-b2-c2 a2-b1-c1 a2-b1-c2 a2-b2-c1 a2-b2-c2 a3-b1-c1 a3-b1-c2 a3-b2-c1 a3-b2-c2"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"uniqID-hier-maker-user-prompt","dir":"Articles","previous_headings":"Create hierarchical ID codes","what":"By user prompts","title":"Using baRcodeR with command line prompts","text":"create hierarchical ID codes interactive mode, start argument user=T function. first prompt appears console : number levels hierarchy: example, levels , b, c; three levels total. # levels hierarchy: 3 second prompt asks string appended end IDs. String end label: 1 : Yes 2 : two possible inputs, 1 2. Typing number result “invalid input” warning. example, ending string. String end label: 1 : Yes 2 : 2 series prompts repeat level, allowing user set number digits printed, leading string, starting number, ending number. similar uniqID_maker(see uniqID_maker step step instructions). number digits print applies levels.","code":"IDcodes <- uniqID_hier_maker(user = TRUE)"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"by-argument","dir":"Articles","previous_headings":"Create hierarchical ID codes","what":"By argument","title":"Using baRcodeR with command line prompts","text":"Instead interactive mode, possible define arguments directly uniqID_hier_maker. Unlike uniqID_maker, list object required specify parameters level hierarchy. First, define vector level three parameters: leading string, start value, end value. Second, combine vectors list object order hierarchy. example , ‘c’ nested within ‘b’ within ‘’. can specify custom suffix string ID codes using end argument, number digits print levels digits argument. possible time vary number digits printed level, however can done using interactive mode (.e. user=T). list can passed uniqID_hier_maker generate unique ID codes. output : data frame contains ID codes first column, separate column level hierarchy, user-defined string header. can saved CSV: file useful archiving ID codes starting point data entry. example, can opened spreadsheet program add data measurement columns. also input creating printable, QR-coded labels create_PDF.","code":"level_one <- c(\"a\", 1, 3) level_two <- c(\"b\", 1, 2) level_three <- c(\"c\", 10, 12) hier_list <- list(level_one, level_two, level_three) IDcodes <- uniqID_hier_maker(hierarchy = hier_list, digits = 1) ## Warning in uniqID_hier_maker(hierarchy = hier_list, digits = 1): Digits ## specified less than max level number. Increasing number of digits for level IDcodes ##        label  a  b   c ## 1  a1-b1-c10 a1 b1 c10 ## 2  a1-b1-c11 a1 b1 c11 ## 3  a1-b1-c12 a1 b1 c12 ## 4  a1-b2-c10 a1 b2 c10 ## 5  a1-b2-c11 a1 b2 c11 ## 6  a1-b2-c12 a1 b2 c12 ## 7  a2-b1-c10 a2 b1 c10 ## 8  a2-b1-c11 a2 b1 c11 ## 9  a2-b1-c12 a2 b1 c12 ## 10 a2-b2-c10 a2 b2 c10 ## 11 a2-b2-c11 a2 b2 c11 ## 12 a2-b2-c12 a2 b2 c12 ## 13 a3-b1-c10 a3 b1 c10 ## 14 a3-b1-c11 a3 b1 c11 ## 15 a3-b1-c12 a3 b1 c12 ## 16 a3-b2-c10 a3 b2 c10 ## 17 a3-b2-c11 a3 b2 c11 ## 18 a3-b2-c12 a3 b2 c12 write.csv(IDcodes, \"IDcodes.csv\")"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"create-barcodes","dir":"Articles","previous_headings":"","what":"Create barcodes","title":"Using baRcodeR with command line prompts","text":"2D barcodes (.e. QR codes) paired ID code strings created input vector text labels. Users can manually create ID codes vector, first column existing data.frame() object, data.frame() <-uniqID_maker <-uniqID_hier_maker. function create_PDF() produces pdf file containing barcodes fit dimensions ULINE 1.75” * 0.5” WEATHER RESISTANT LABEL laser printer; item # S-19297 (uline.ca). needed, page setup can modified using advanced options custom_create_PDF. first step read vector ID codes, example CSV file:","code":"# Reading in from a csv file IDcodes<-read.csv(\"IDcodes.csv\")"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"create-barcodes-user-prompt","dir":"Articles","previous_headings":"Create barcodes","what":"By user prompt","title":"Using baRcodeR with command line prompts","text":"following example, IDcodes data.frame object used create PDF file called “example.pdf”, font size 3.5, error correction level “Q” meaning barcode can tolerate 25% damage. parameter user=T prompt user guide creation pdf file containing scannable barcodes. IDcodes vector, vector directly used generate barcodes. IDcodes data frame, function use column called label else first column data frame. user prompt printed console. example: Please enter name PDF output file: combination letters numbers can used name pdf file. , file name set “example.” Please enter name PDF output file: example next user prompt set size text printed barcode. Please enter font size: font size point size apply size text PDF. example, entering 12 create 12 point font PDF. Please enter font size: 12 last basic parameter set error correction level. four possible levels: L, M, Q, H. Level “L” - 7% damage – ideal small labels (large pixels) Level “M” - 15% damage Level “Q” - 25% damage Level “H” - 30% damage – good bigger labels (small pixels) user prompt error correction level similar previous prompts. Select error correction level. 1 : L (7% damage) 2 : M (15% damage) 3 : Q (25% damage) 4 : H (30% damage) example uses error correction level “Q” 3 entered. Select error correction level. 1 : L (7% damage) 2 : M (15% damage) 3 : Q (25% damage) 4 : H (30% damage) 3 last user prompt asks whether user wants modify advanced parameters. Edit advanced parameters? 1 : Yes 2 : example, advanced parameters modified (input 2). Using advanced parameters covered advanced options Edit advanced parameters? 1 : Yes 2 : 2","code":"create_PDF(user=TRUE, Labels=IDcodes)"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"by-arguments","dir":"Articles","previous_headings":"Create barcodes","what":"By arguments","title":"Using baRcodeR with command line prompts","text":"example can reproduced directly following parameters:","code":"create_PDF(Labels = IDcodes, name = \"example\", ErrCorr = \"Q\", Fsz = 2.5)"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"custom-create-pdf","dir":"Articles","previous_headings":"","what":"Advanced Options for pdf output","title":"Using baRcodeR with command line prompts","text":"advanced options pdf output can accessed interactively specifying additional arguments create_PDF. user prompts similar ones shown allow customization output document printing formats. Documentation advanced options can found using man page ?custom_create_PDF. Arguments can passed create_PDF custom_create_PDF create_PDF just wrapper custom_create_PDF.","code":"## This will create a pdf sheet where the labels are printed in columns then rows. It will skip 3 rows from the top and 1 column from the left.  create_PDF(Labels = Labels, name = \"example_advanced\", ErrCorr = \"Q\", Fsz = 2.5, Across = F, ERows = 3, ECol = 1)"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"formatting-of-text-labels","dir":"Articles","previous_headings":"","what":"Formatting of text labels","title":"Using baRcodeR with command line prompts","text":"Trying format text labels baRcodeR GUI recommended.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"new-lines","dir":"Articles","previous_headings":"Formatting of text labels","what":"New Lines","title":"Using baRcodeR with command line prompts","text":"possible force formatting labels inserting \\n line breaks.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"tabs","dir":"Articles","previous_headings":"Formatting of text labels","what":"Tabs","title":"Using baRcodeR with command line prompts","text":"Using \\t create error due underlying qrcode library used package. One solution use space character place tabs.","code":"# original label X <- \"text\\ttext\" cat(X) ## text text cat(gsub(\"\\\\t\", \"\\x20\\x20\\x20\\x20\", X)) ## text    text"},{"path":"https://docs.ropensci.org/baRcodeR/articles/Using-baRcodeR.html","id":"when-reading-from-file","dir":"Articles","previous_headings":"Formatting of text labels","what":"When reading from file","title":"Using baRcodeR with command line prompts","text":"R automatically escapes escape characters reading file. example, text\\ntext read text\\\\ntext read.csv. Use global substitution replace double slashes.","code":"X <- \"text\\\\ntext\" cat(X) ## text\\ntext cat(gsub(\"\\\\\\\\n\",\"\\n\",X)) ## text ## text"},{"path":"https://docs.ropensci.org/baRcodeR/articles/use-addin.html","id":"cheat-sheet","dir":"Articles","previous_headings":"","what":"Cheat Sheet","title":"Use baRcodeR addin","text":"2-page, quick-reference guide available via Figshare RStudio available, see introduction vignette(\"Using-baRcodeR)\" command line use.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/use-addin.html","id":"using-the-rstudio-addin","dir":"Articles","previous_headings":"Cheat Sheet","what":"Using the RStudio addin","title":"Use baRcodeR addin","text":"main baRcodeR functions unique identifiers QR code generation can performed interactive via RStudio addin found toolbar.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/use-addin.html","id":"find-the-addin","dir":"Articles","previous_headings":"Cheat Sheet > Using the RStudio addin","what":"Find the addin","title":"Use baRcodeR addin","text":"Make sure restart RStudio installing. addin appear toolbar. Click add-, popup window appear. Screenshot RStudio addins bar Note 3 tabs along bottom, corresponding three main baRcodeR commands: uniqID_maker, uniqID_hier_maker create_PDF. Screenshot simple ID Code tab","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/use-addin.html","id":"generate-simple-id-codes","dir":"Articles","previous_headings":"Cheat Sheet > Using the RStudio addin","what":"Generate simple ID codes","title":"Use baRcodeR addin","text":"first tab generates basic ID codes user input seen : Active simple ID code tab fill fields, preview ID codes appear right-hand side along reproducible code, can copied archival purposes. Clicking ‘Create Label.csv’ create CSV file called ‘Label_YYYY-MM-DD.csv’, contains data frame full unique ID strings first column, user-defined prefix string second column, unique ID number third column. file useful archiving ID codes starting point data entry. example, can opened spreadsheet program add data measurement columns. also input creating printable, QR-coded labels create_PDF. Screenshot hierarchical ID code tab","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/use-addin.html","id":"generate-hierarchical-id-codes","dir":"Articles","previous_headings":"Cheat Sheet > Using the RStudio addin","what":"Generate Hierarchical ID codes","title":"Use baRcodeR addin","text":"can switch simple ID code generation tab hierarchical ID code generation QR code creation tabs bottom. Hierarchical ID codes nested structure (e.g. X subsamples Y individuals Z time points), information level saved “Hierarchy” section. “Add level” button used add levels hierarchy, “Remove level” button remove recently added level. data frame output contain ID codes first column, separate column level hierarchy, user-defined string header; shown ‘Preview’. simple ID code tab, output Hierarchical ID codes CSV file “Labels_YYYY-MM-DD.csv”, saved working directory. file useful archiving ID codes starting point data entry. example, can opened spreadsheet program add data measurement columns. also input creating printable, QR-coded labels create_PDF. Sceenshot PDF creation tab","code":""},{"path":"https://docs.ropensci.org/baRcodeR/articles/use-addin.html","id":"create-the-pdf-for-sticker-printing","dir":"Articles","previous_headings":"Cheat Sheet > Using the RStudio addin","what":"Create the PDF for sticker printing","title":"Use baRcodeR addin","text":"Barcode Creation tab contains advanced options page layout. default options fit specific format: ULINE 1.75” * 0.5” WEATHER RESISTANT LABEL laser printer; item # S-19297 (uline.ca). text file containing ID codes imported clicking “Browse” button selecting CSV text file file browser. file previewed clicking “Import File”. importing CSV file, preview shows part expected output PDF file based font size layout options. first column highlighted default defines column use labels. Clicking different column set ID code column, shown preview. Screenshot Column Selection Clicking “Make PDF” generate printable PDF barcodes provided. can take several minutes >100 barcodes, depending computer speed. text “Done” appear upon completion PDF file. NOTE: printing pdf, ensure ‘anti-aliasing’ ‘smoothing’ options turned , using ‘fit page’ similar options re-scale output.","code":"## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5       cli_3.6.2         knitr_1.45        rlang_1.1.3       ##  [5] xfun_0.42         highr_0.10        stringi_1.8.3     png_0.1-8         ##  [9] purrr_1.0.2       textshaping_0.3.7 jsonlite_1.8.8    glue_1.7.0        ## [13] htmltools_0.5.7   ragg_1.2.7        sass_0.4.8        rmarkdown_2.25    ## [17] evaluate_0.23     jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.8        ## [21] lifecycle_1.0.4   memoise_2.0.1     stringr_1.5.1     compiler_4.3.2    ## [25] fs_1.6.3          systemfonts_1.0.5 digest_0.6.34     R6_2.5.1          ## [29] magrittr_2.0.3    bslib_0.6.1       tools_4.3.2       pkgdown_2.0.7     ## [33] cachem_1.0.8      desc_1.4.3"},{"path":"https://docs.ropensci.org/baRcodeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yihan Wu. Author. Robert Colautti. Author, maintainer. Emily Bao. Contributor. Lluís Revilla Sancho. Reviewer. Rayna Harris. Reviewer.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu Y, Colautti R (2024). baRcodeR: Label Creation Tracking Collecting Data Biological Samples. R package version 0.1.8https://docs.ropensci.org/baRcodeR/ (website) https://github.com/ropensci/baRcodeR/, https://docs.ropensci.org/baRcodeR/ (website) https://github.com/ropensci/baRcodeR/.","code":"@Manual{,   title = {baRcodeR: Label Creation for Tracking and Collecting Data from Biological Samples},   author = {Yihan Wu and Robert Colautti},   year = {2024},   note = {R package version 0.1.8https://docs.ropensci.org/baRcodeR/ (website) https://github.com/ropensci/baRcodeR/},   url = {https://docs.ropensci.org/baRcodeR/ (website) https://github.com/ropensci/baRcodeR/}, }"},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"barcoder","dir":"","previous_headings":"","what":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"baRcodeR generates labels repeatable workflows biological samples","code":""},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"can install released version baRcodeR CRAN : development version GitHub : NOTE: Restarting RStudio necessary addin baRcodeR appear.","code":"install.packages(\"baRcodeR\") # install.packages(\"devtools\") devtools::install_github(\"ropensci/baRcodeR\", build_vignettes = T) # for windows users to build vignettes # install_github(\"ropensci/baRcodeR\", build_opts = c(\"--no-resave-data\", \"--no-manual\"), build_vignettes = TRUE)"},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"Text identifiers can created sequential hierarchical pattern. text identifiers can printed laser printer sticker sheets.  Th particular layout defaults ULINE 1.75” * 0.5” labels layouts can specified parameters custom_create_PDF function.","code":"library(baRcodeR) ## Loading required package: qrcode example_labels <- uniqID_maker(user = FALSE, string = \"Example\", level = 1:80) head(example_labels) ##        label ind_string ind_number ## 1 Example001    Example        001 ## 2 Example002    Example        002 ## 3 Example003    Example        003 ## 4 Example004    Example        004 ## 5 Example005    Example        005 ## 6 Example006    Example        006 pdf_file_name <- tempfile() create_PDF(Labels = example_labels, name = pdf_file_name)"},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"baRcodeR R package generating unique identifier strings printable 2D (QR) barcodes, aim improving repeatability labelling, tracking curating data biological samples. Specifically, users can: generate simple ID codes (Ex001, Ex002, Ex003 …), generate hierarchical (.e. nested) ID codes (A01-B01, A01-B02, A02-B01, A02-B02, A03-B01 …), generate printable PDF files paired ID codes QR barcodes default spacing ULINE 1.75” * 0.5” WEATHER RESISTANT LABEL laser printer; item # S-19297 (uline.ca) customize PDF layout type printable format (e.g, vinyl stickers, waterproof paper) generate reproducible code archival purposes (e.g. publications online repositories) create CSV files link unique IDs sampling hierarchy downstream data collection workflows. example, PyTrackDat pipeline can used set web-based data collection platform: https://github.com/pytrackdat/pytrackdat Creating unique, scannable barcodes generally involves two steps: Generate unique ID codes uniqID_maker() uniqID_hier_maker() Create PDF file containing unique ID codes coupled 2D barcode using create_PDF() already ID codes saved CSV file, csv can read data.frame() R. label column, exists used input generate barcodes. Otherwise, first column data frame used. NOTE: printing pdf, ensure ‘anti-aliasing’ ‘smoothing’ options turned , using ‘fit page’ similar options re-scale output. Flowchart major functions","code":""},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"cheat-sheet","dir":"","previous_headings":"Introduction","what":"Cheat Sheet","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"2-page, quick-reference guide available via Figshare","code":""},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"usage-with-rstudio-addin","dir":"","previous_headings":"","what":"Usage with RStudio addin","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"Please load vignette “Use Addin”.","code":"library(baRcodeR) vignette(\"use-addin\")"},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"usage-from-the-console","dir":"","previous_headings":"","what":"Usage from the console","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"Please load vignette “Using-baRcodeR” console use.","code":"vignette(\"Using-baRcodeR\")"},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"Please note ‘baRcodeR’ project released Contributor Code Conduct. contributing project, agree abide terms. Please document issues description, minimal reproducible example, sessionInfo().","code":"sessionInfo() ## R version 4.1.3 (2022-03-10) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 22000) ##  ## Matrix products: default ##  ## locale: ## [1] LC_COLLATE=English_Canada.1252  LC_CTYPE=English_Canada.1252    ## [3] LC_MONETARY=English_Canada.1252 LC_NUMERIC=C                    ## [5] LC_TIME=English_Canada.1252     ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] baRcodeR_0.1.7 qrcode_0.1.4   ##  ## loaded via a namespace (and not attached): ##  [1] png_0.1-7         assertthat_0.2.1  digest_0.6.29     R.methodsS3_1.8.1 ##  [5] magrittr_2.0.2    evaluate_0.15     highr_0.9         rlang_1.0.2       ##  [9] stringi_1.7.6     cli_3.2.0         rstudioapi_0.13   R.oo_1.24.0       ## [13] R.utils_2.11.0    rmarkdown_2.13    tools_4.1.3       stringr_1.4.0     ## [17] xfun_0.30         yaml_2.3.5        fastmap_1.1.0     compiler_4.1.3    ## [21] htmltools_0.5.2   knitr_1.38"},{"path":"https://docs.ropensci.org/baRcodeR/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also:","title":"Label Creation for Tracking and Collecting Data from\n    Biological Samples","text":"zintris R interface C zint library. Use zintr want create single barcode images. zintr include functions () automating creation biologically-relevant, unique ID codes (ii) customizable layouts printing multiple barcodes. zint C library generates variety different barcodes. Just like zintr, zint produces single barcode images.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/cheatsheet.html","id":null,"dir":"Reference","previous_headings":"","what":"baRcodeR Cheatsheet — cheatsheet","title":"baRcodeR Cheatsheet — cheatsheet","text":"addin links downloadable PDF version baRcodeR cheatsheet.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/cheatsheet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"baRcodeR Cheatsheet — cheatsheet","text":"","code":"cheatsheet()"},{"path":"https://docs.ropensci.org/baRcodeR/reference/cheatsheet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"baRcodeR Cheatsheet — cheatsheet","text":"Opens webpage PDF","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/cheatsheet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"baRcodeR Cheatsheet — cheatsheet","text":"","code":"if(interactive()){ baRcodeR::cheatsheet() }"},{"path":"https://docs.ropensci.org/baRcodeR/reference/create_PDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Make barcodes and print labels — create_PDF","title":"Make barcodes and print labels — create_PDF","text":"Input vector data.frame ID codes produce PDF QR codes can printed. wrapper function custom_create_PDF. See details custom_create_PDF format text labels needed.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/create_PDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make barcodes and print labels — create_PDF","text":"","code":"create_PDF(   user = FALSE,   Labels = NULL,   name = \"LabelsOut\",   type = \"matrix\",   ErrCorr = \"H\",   Fsz = 12,   ... )"},{"path":"https://docs.ropensci.org/baRcodeR/reference/create_PDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make barcodes and print labels — create_PDF","text":"user logical. Run function using interactive mode (prompts user parameter values) Default FALSE Labels vector data frame object containing label names (.e. unique ID codes) either UTF-8 ASCII encoding. name character. Name PDF output file. Default \"LabelsOut\". file named name.pdf saved working directory default. Use \"dirname/name\" produce file called name.pdf dirname directory. type character. Choice \"linear\" code 128, \"linear2\" extended code 128, \"matrix\" QR code (.e. 2D barcode) text right, \"matrix2\" QR code text ,     depending y_space value (0 = , 1 = ). ErrCorr error correction value matrix labels . Level damage low high: \"L\", \"M\", \"Q\", \"H\". Default \"H\". See details explanation values. Fsz numerical. Sets font size points. Longer ID codes may shrunk fit truncation used matrix labels. Default font size 5. ID codes also shrunk automatically fit label actual size bigger label dimensions. ... advanced arguments modify PDF layout. See custom_create_PDF arguments. advanced options can  accessed interactively user = TRUE entering TRUE prompted   modify advanced options.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/create_PDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make barcodes and print labels — create_PDF","text":"PDF file containing QR-coded labels, saved default directory.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/create_PDF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make barcodes and print labels — create_PDF","text":"default PDF setup ULINE 1.75\" * 0.5\" WEATHER RESISTANT LABEL laser printer; item # S-19297 (uline.ca). page format can modified using ... (advanced arguments) label types.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/baRcodeR/reference/create_PDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make barcodes and print labels — create_PDF","text":"","code":"## data frame example_vector <- as.data.frame(c(\"ao1\", \"a02\", \"a03\"))  if (FALSE) { ## run with default options ## pdf file will be \"example.pdf\" saved into a temp directory  temp_file <- tempfile()  create_PDF(Labels = example_vector, name = temp_file)  ## view example output from temp folder system2(\"open\", paste0(temp_file, \".pdf\")) }  ## run interactively. Overrides default pdf options if(interactive()){     create_PDF(user = TRUE, Labels = example_vector) }  if (FALSE) { ## run using a data frame, automatically choosing the \"label\" column example_df <- data.frame(\"level1\" = c(\"a1\", \"a2\"), \"label\" = c(\"a1-b1\", \"a1-b2\"), \"level2\" = c(\"b1\", \"b1\")) create_PDF(user = FALSE, Labels = example_df, name = file.path(tempdir(), \"example_2\")) }  if (FALSE) { ## run using an unnamed data frame example_df <- data.frame(c(\"a1\", \"a2\"), c(\"a1-b1\", \"a1-b2\"), c(\"b1\", \"b1\")) ## specify column from data frame create_PDF(user = FALSE, Labels = example_df[,2], name = file.path(tempdir(), \"example_3\")) } if (FALSE) { ## create linear (code128) label rather than matrix (2D/QR) labels example_df <- data.frame(c(\"a1\", \"a2\"), c(\"a1-b1\", \"a1-b2\"), c(\"b1\", \"b1\")) ## specify column from data frame create_PDF(user = FALSE, Labels = example_df, name = file.path(tempdir(), \"example_4\", type = \"linear\")) }"},{"path":"https://docs.ropensci.org/baRcodeR/reference/custom_create_PDF.html","id":null,"dir":"Reference","previous_headings":"","what":"Make barcodes and print labels — custom_create_PDF","title":"Make barcodes and print labels — custom_create_PDF","text":"Input vector data frame ID codes produce PDF barcode labels can printed. PDF setup ULINE 1.75\" * 0.5\" WEATHER RESISTANT LABEL laser printer; item # S-19297 (uline.ca). See details format text labels properly.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/custom_create_PDF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make barcodes and print labels — custom_create_PDF","text":"","code":"custom_create_PDF(   user = FALSE,   Labels = NULL,   name = \"LabelsOut\",   type = \"matrix\",   ErrCorr = \"H\",   Fsz = 12,   Across = TRUE,   ERows = 0,   ECols = 0,   trunc = TRUE,   numrow = 20,   numcol = 4,   page_width = 8.5,   page_height = 11,   width_margin = 0.25,   height_margin = 0.5,   label_width = NA,   label_height = NA,   x_space = 0,   y_space = 0.5,   alt_text = NULL,   replace_label = FALSE,   denote = c(\"\\n(\", \")\") )  qrcode_make(Labels, ErrCorr)  code_128_make(Labels)  code_128_make2(Labels)"},{"path":"https://docs.ropensci.org/baRcodeR/reference/custom_create_PDF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make barcodes and print labels — custom_create_PDF","text":"user logical. Run function using interactive mode (prompts user parameter values) Default FALSE Labels vector data frame object containing label names (.e. unique ID codes) either UTF-8 ASCII encoding. name character. Name PDF output file. Default \"LabelsOut\". file named name.pdf saved working directory default. Use \"dirname/name\" produce file called name.pdf dirname directory. type character. Choice \"linear\" code 128, \"linear2\" extended code 128, \"matrix\" QR code (.e. 2D barcode) text right, \"matrix2\" QR code text ,     depending y_space value (0 = , 1 = ). ErrCorr error correction value matrix labels . Level damage low high: \"L\", \"M\", \"Q\", \"H\". Default \"H\". See details explanation values. Fsz numerical. Sets font size points. Longer ID codes may shrunk fit truncation used matrix labels. Default font size 5. ID codes also shrunk automatically fit label actual size bigger label dimensions. Across logical. TRUE, print labels across rows, left right. FALSE, print labels columns, top bottom. Default TRUE. ERows number rows skip. Default 0. Example: setting ERows 6 begin printing row 7. ERows ECols useful printing partially-used label sheets. ECols number columns skip. Default 0. Example: setting ECols 2 put first label column 3. ERows ECols useful printing partially-used label sheets. trunc logical. Text broken multiple lines longer ID codes, prevent printing label area. Default TRUE. trunc = FALSE, text larger physical label, text shrunk automatically. numrow numerical. Number rows per page. Default 20. numcol numerical. Number columns per page. Default 4. page_width numerical. Width page (inches). Default set 8.5. page_height numerical. Height page (inches). Default set 11. width_margin numerical. width margin page (inches). Default 0.25. height_margin numerical. height margin page (inches). Default 0.5. label_width numerical. width label (inches). calculated (page_width - 2 * width_margin)/numcol label_width set NULL. label_height numerical. height label (inches). calculated (page_height - 2 * height_margin)/numrow label_height set NULL. x_space numerical. value 0 1. sets distance QR code text label. applies type = \"matrix\". Default 0. y_space numerical. height position text physical label proportion label height. applies type = \"matrix\" \"matrix2\". value 0 1.  Default 0.5. alt_text vector containing alternative names printed along  Labels ENCODED barcode image. Use caution! replace_label logical. Replace label text alt_text. Generated barcode contain information text label. Use caution! denote character (prefix) vector length 2 (prefix, suffix).  Denotes alt_text encoded barcode image.  Default brackets ().","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/custom_create_PDF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make barcodes and print labels — custom_create_PDF","text":"PDF file containing QR-coded labels, saved default   directory.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/custom_create_PDF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make barcodes and print labels — custom_create_PDF","text":"qrcode_make helper function generating QR code matrix. code_128_make helper function generating linear barcode according code 128 set B. code_128_make2 extended helper function generating linear barcode according code 128 set B, Latin-1 characters, set C partially . custom_create_PDF main function sets page layout, creates PDF file. Correction levels QR codes refer level damage label can tolerate label become unreadable scanner (L = Low (7%), M = Medium (15%), Q = Quantile (25%), H = High (30%)). label L correction can lose 7 H label can lose 30 can printed smaller sizes compared H codes. escape characters \\n \\s (hex equivalents \\x0A \\x20 can used format text labels. Tab character \\t (\\x09) work QR codes replaced number space characters. See package vignette examples. ECol ERow greater numcol numrow,  labels printed starting second page.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/baRcodeR/reference/custom_create_PDF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make barcodes and print labels — custom_create_PDF","text":"","code":"## this is the same examples used with create_PDF ## data frame example_vector <- as.data.frame(c(\"ao1\", \"a02\", \"a03\"))  if (FALSE) { ## run with default options ## pdf file will be \"example.pdf\" saved into a temp directory temp_file <- tempfile()  custom_create_PDF(Labels = example_vector, name = temp_file)  ## view example output from temp folder system2(\"open\", paste0(temp_file, \".pdf\")) }  ## run interactively. Overrides default pdf options if(interactive()){     custom_create_PDF(user = TRUE, Labels = example_vector) }  if (FALSE) { ## run using a data frame, automatically choosing the \"label\" column example_df <- data.frame(\"level1\" = c(\"a1\", \"a2\"), \"label\" = c(\"a1-b1\",  \"a1-b2\"), \"level2\" = c(\"b1\", \"b1\"))  custom_create_PDF(user = FALSE, Labels = example_df, name = file.path(tempdir(),   \"example_2\"))  } if (FALSE) { ## run using an unnamed data frame example_df <- data.frame(c(\"a1\", \"a2\"), c(\"a1-b1\", \"a1-b2\"), c(\"b1\", \"b1\")) ## specify column from data frame custom_create_PDF(user = FALSE, Labels = example_df[,2], name = file.path(tempdir(), \"example_3\")) } if (FALSE) { ## create linear (code128) label rather than matrix (2D/QR) labels example_df <- data.frame(c(\"a1\", \"a2\"), c(\"a1-b1\", \"a1-b2\"), c(\"b1\", \"b1\")) ## specify column from data frame custom_create_PDF(user = FALSE, Labels = example_df, name = file.path(tempdir(), \"example_4\", type = \"linear\")) } if (FALSE) { ## Include text for the user that is NOT encoded into the barcode image ## Excluded text is denoted with brackets by default example_df <- data.frame(ID = floor(runif(3) * 10000), name = c(\"A\", \"B\", \"C\"),  dob = c(\"1/1/2020\", \"12/6/2001\", \"2/8/1986\"))   ## linear (1d) barcodes with custom denote parameter custom_create_PDF(Labels = example_df$ID, alt_text = paste(example_df$name,  example_df$dob), type = \"linear\", denote=\".\") }"},{"path":"https://docs.ropensci.org/baRcodeR/reference/make_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"baRcodeR GUI — make_labels","title":"baRcodeR GUI — make_labels","text":"addin allow interactive create ID codes generate PDF files QR codes.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/make_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"baRcodeR GUI — make_labels","text":"","code":"make_labels()"},{"path":"https://docs.ropensci.org/baRcodeR/reference/make_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"baRcodeR GUI — make_labels","text":"Opens RStudio addin gadget window making labels barcodes GUI","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/make_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"baRcodeR GUI — make_labels","text":"","code":"if(interactive()){ library(baRcodeR) make_labels() }"},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_hier_maker.html","id":null,"dir":"Reference","previous_headings":"","what":"Make hierarchical ID codes — uniqID_hier_maker","title":"Make hierarchical ID codes — uniqID_hier_maker","text":"Generate hierarchical ID codes barcode labels.  Hierarchical codes nested structure: e.g. Y subsamples  X individuals. Use uniqID_maker  sequential single-level labels. Can run interactive mode,  prompting user input. data.frame can saved CSV  () create_PDF function generate printable  QR-coded labels; (ii) downstream data collection using spreadsheet,  relational database, etc.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_hier_maker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make hierarchical ID codes — uniqID_hier_maker","text":"","code":"uniqID_hier_maker(user = FALSE, hierarchy, end = NULL, digits = 2)"},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_hier_maker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make hierarchical ID codes — uniqID_hier_maker","text":"user logical. Run function using interactive mode (prompts user  parameter values). Default FALSE hierarchy list. list element consisting three members vector three elements (string, beginning value, end value). See examples. Used user=FALSE) end character. string appended end label. digits numerical. Default 2. Number digits printed,  adding leading 0s needed. apply levels user=FALSE.  max number digits ID code greater number digits  defined digits, digits automatically increased  avoid errors.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_hier_maker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make hierarchical ID codes — uniqID_hier_maker","text":"data.frame text labels first column, additional columns  level hierarchy list, defined user.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_hier_maker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make hierarchical ID codes — uniqID_hier_maker","text":"","code":"if(interactive()){ ## for interactive mode uniqID_hier_maker(user = TRUE) }  ## how to make hierarchy list  ## create vectors for each level in the order string_prefix, beginning_value, ## end_value and combine in list  a <- c(\"a\", 3, 6) b <- c(\"b\", 1, 3) c <- list(a, b) Labels <- uniqID_hier_maker(hierarchy = c) Labels #>      label   a   b #> 1  a03-b01 a03 b01 #> 2  a03-b02 a03 b02 #> 3  a03-b03 a03 b03 #> 4  a04-b01 a04 b01 #> 5  a04-b02 a04 b02 #> 6  a04-b03 a04 b03 #> 7  a05-b01 a05 b01 #> 8  a05-b02 a05 b02 #> 9  a05-b03 a05 b03 #> 10 a06-b01 a06 b01 #> 11 a06-b02 a06 b02 #> 12 a06-b03 a06 b03  ## add string at end of each label Labels <- uniqID_hier_maker(hierarchy = c, end = \"end\") Labels #>         label   a   b #> 1  a03-b01end a03 b01 #> 2  a03-b02end a03 b02 #> 3  a03-b03end a03 b03 #> 4  a04-b01end a04 b01 #> 5  a04-b02end a04 b02 #> 6  a04-b03end a04 b03 #> 7  a05-b01end a05 b01 #> 8  a05-b02end a05 b02 #> 9  a05-b03end a05 b03 #> 10 a06-b01end a06 b01 #> 11 a06-b02end a06 b02 #> 12 a06-b03end a06 b03"},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_maker.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of ID codes — uniqID_maker","title":"Generate a list of ID codes — uniqID_maker","text":"Create ID codes consisting text string unique numbers (string001, string002, ...).  Can run interactive mode, prompting user input. data.frame  output can saved CSV () create_PDF function  generate printable QR-coded labels; (ii) downstream data  collection software (spreadsheets, relational databases, etc.)","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_maker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of ID codes — uniqID_maker","text":"","code":"uniqID_maker(   user = FALSE,   string = NULL,   level,   digits = 3,   ending_string = NULL )"},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_maker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of ID codes — uniqID_maker","text":"user logical. Run function using interactive mode (prompts user  parameter values). Default FALSE string character. Text string label. Default null. level integer vector. Defines numerical values appended character string. Can sequence numbers (see examples). digits numerical. Default 2. Number digits printed,  adding leading 0s needed. apply levels user=FALSE.  numeric value label greater number digits  digits, digits automatically increased entire level.  Default 3. ending_string character string vector strings attach label. vector used, combinations vector unique label produced.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_maker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of ID codes — uniqID_maker","text":"data.frame text labels first column, along string numeric values two additional columns.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_maker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a list of ID codes — uniqID_maker","text":"function called user = TRUE, sequence  numbers generated starting ending number provided  user. user = FALSE, vector custom numbers can provided.  See example .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/baRcodeR/reference/uniqID_maker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of ID codes — uniqID_maker","text":"","code":"## sequential string of numbers in label Labels <- uniqID_maker(string = \"string\", level = c(1:5), digits = 2) Labels #>      label ind_string ind_number #> 1 string01     string         01 #> 2 string02     string         02 #> 3 string03     string         03 #> 4 string04     string         04 #> 5 string05     string         05  ## can also use nonsequential strings in input for levels level <- c(1:5, 8:10, 999:1000) Labels <- uniqID_maker(string = \"string\", level = level, digits = 4) Labels #>         label ind_string ind_number #> 1  string0001     string       0001 #> 2  string0002     string       0002 #> 3  string0003     string       0003 #> 4  string0004     string       0004 #> 5  string0005     string       0005 #> 6  string0008     string       0008 #> 7  string0009     string       0009 #> 8  string0010     string       0010 #> 9  string0999     string       0999 #> 10 string1000     string       1000   ## Using the ending_string to produce labels with unique endings ## this is different from hierarchical labels with two levels as there  ## is no numbering, just the text string   Labels <- uniqID_maker(string = \"string\", level = c(1:5), digits = 2, ending_string = \"A\") Labels #>        label ind_string ind_number end_string #> 1 string01-A     string         01          A #> 2 string02-A     string         02          A #> 3 string03-A     string         03          A #> 4 string04-A     string         04          A #> 5 string05-A     string         05          A  Labels <- uniqID_maker(string = \"string\", level = c(1:5),                         digits = 2, ending_string = c(\"A\", \"B\")) Labels #>         label ind_string ind_number end_string #> 1  string01-A     string         01          A #> 2  string02-A     string         02          A #> 3  string03-A     string         03          A #> 4  string04-A     string         04          A #> 5  string05-A     string         05          A #> 6  string01-B     string         01          B #> 7  string02-B     string         02          B #> 8  string03-B     string         03          B #> 9  string04-B     string         04          B #> 10 string05-B     string         05          B   if(interactive()){ ## function using user prompt does not use any of the other parameters Labels <- uniqID_maker(user = TRUE) Labels }"},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-018","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.8","title":"baRcodeR 0.1.8","text":"Thanks cfmw suggesting change allow underscores QR codes, real-world testing. Thanks lavaman13 wolass requesting different layout QR Code labels allows text barcode. now implemented type=\"matrix2\" argument create_PDF()","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-017","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.7","title":"baRcodeR 0.1.7","text":"CRAN release: 2022-04-01 Thanks rwalke adding “Linear2” option list (Linear, Matrix). produce Code 128 extended linear barcodes, allowing particular 1-D barcode patterns distinct “Linear” Thanks Theirry() pointing need change qrcode::qr_code() (deprecated) qrcode_gen","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-016","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.6","title":"baRcodeR 0.1.6","text":"request COVID-2019 research group, added option allow non-encoded text appear linear & 2D barcodes. added custom_create_PDF(): alt_text – adds human-readable text encoded digital barcode denote – characters used denote non-encoded text considered advanced features used cautiously, therefore made available Addins GUI.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-015","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.5","title":"baRcodeR 0.1.5","text":"CRAN release: 2020-03-07 Bugs: fixed errors tests due r-devel switching using stringsAsFactor = FALSE default fixed broken link readme","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-014","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.4","title":"baRcodeR 0.1.4","text":"CRAN release: 2019-12-06 Bugs Improvements: tests added user prompts RStudio addin shinytest vignettes describing use add-command line now organized separately restructured README custom_create_PDF() page generation now faster (helpful making sheets hundreds labels) command prompts restructured menu-like selection yes/questions. minor changes addition major ones outlined suggested reviews rOpenSci documented baRcodeR package now part rOpenSci documentation online ()[https://docs.ropensci.org/baRcodeR/]","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-013","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.3","title":"baRcodeR 0.1.3","text":"CRAN release: 2019-04-26 Bugs Improvements: major bug fix linear barcodes occasionally created unscannable barcodes. added documentation create alternative formatting labels (e.g. spaces, line breaks) added padding labels single character blank 2-page cheatsheet now available addin","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-012","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.2","title":"baRcodeR 0.1.2","text":"CRAN release: 2019-01-10 New Feature: response user request, now option print linear (code 128 set B) barcodes.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-011","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.1","title":"baRcodeR 0.1.1","text":"CRAN release: 2018-11-29 Bugs Improvements: create_PDF() function replace underscores text dashes. Underscores specified encoding dictionary qcrode throw errors. x_space y_space parameters now limited 0 1 easier use. parameters used position text printed labels. Font size longer limited now measured points. Font size automatically reduced text code long printed labels. New Features: label_width label_height parameters specify width height label enable alleys (.e. gaps) physical labels.","code":""},{"path":"https://docs.ropensci.org/baRcodeR/news/index.html","id":"barcoder-010","dir":"Changelog","previous_headings":"","what":"baRcodeR 0.1.0","title":"baRcodeR 0.1.0","text":"CRAN release: 2018-10-26 first official release package.","code":""}]
